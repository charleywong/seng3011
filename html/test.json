{
  "stats": {
    "suites": 18,
    "tests": 28,
    "passes": 25,
    "pending": 0,
    "failures": 3,
    "start": "2017-04-24T12:01:02.720Z",
    "end": "2017-04-24T12:01:18.202Z",
    "duration": 15482,
    "testsRegistered": 28,
    "passPercent": 89.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Multiple IDs performance testing with one request",
        "suites": [
          {
            "title": "# Request returns for one company",
            "suites": [],
            "tests": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for one company should get response within 5000ms",
                "timedOut": true,
                "duration": 5004,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[0])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "ffd5cd58-b80a-4988-a7c3-096d38baed14",
                "parentUUID": "c9741ff3-78ae-441f-b0f0-3fdeb1ced343",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/performance.js",
            "uuid": "c9741ff3-78ae-441f-b0f0-3fdeb1ced343",
            "fullFile": "/Users/cungminh/seng3011/test/performance.js",
            "passes": [],
            "failures": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for one company should get response within 5000ms",
                "timedOut": true,
                "duration": 5004,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[0])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "ffd5cd58-b80a-4988-a7c3-096d38baed14",
                "parentUUID": "c9741ff3-78ae-441f-b0f0-3fdeb1ced343",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5004,
            "rootEmpty": false
          },
          {
            "title": "# Request returns for 3 companies",
            "suites": [],
            "tests": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for 3 companies should get response within 5000ms",
                "timedOut": true,
                "duration": 5000,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[2])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "d56fb703-0b70-4586-b565-5fceccb5f948",
                "parentUUID": "8a6e9f7d-0fcb-4e79-9df9-b6c23876af91",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/performance.js",
            "uuid": "8a6e9f7d-0fcb-4e79-9df9-b6c23876af91",
            "fullFile": "/Users/cungminh/seng3011/test/performance.js",
            "passes": [],
            "failures": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for 3 companies should get response within 5000ms",
                "timedOut": true,
                "duration": 5000,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[2])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "d56fb703-0b70-4586-b565-5fceccb5f948",
                "parentUUID": "8a6e9f7d-0fcb-4e79-9df9-b6c23876af91",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5000,
            "rootEmpty": false
          },
          {
            "title": "# Request returns for 6 companies",
            "suites": [],
            "tests": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for 6 companies should get response within 5000ms",
                "timedOut": true,
                "duration": 5004,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[1])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "a2115ba5-989d-45b8-acb5-0869a7bf214c",
                "parentUUID": "ba9749c7-3717-413a-b6cc-4a80cfb801fc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/performance.js",
            "uuid": "ba9749c7-3717-413a-b6cc-4a80cfb801fc",
            "fullFile": "/Users/cungminh/seng3011/test/performance.js",
            "passes": [],
            "failures": [
              {
                "title": "should get response within 5000ms",
                "fullTitle": "Multiple IDs performance testing with one request # Request returns for 6 companies should get response within 5000ms",
                "timedOut": true,
                "duration": 5004,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[1])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
                "err": {
                  "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
                },
                "isRoot": false,
                "uuid": "a2115ba5-989d-45b8-acb5-0869a7bf214c",
                "parentUUID": "ba9749c7-3717-413a-b6cc-4a80cfb801fc",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5004,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/performance.js",
        "uuid": "ba6db61b-b5cd-42a5-92d7-697588fb338d",
        "fullFile": "/Users/cungminh/seng3011/test/performance.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "inputParser",
        "suites": [
          {
            "title": "#parseInput()",
            "suites": [],
            "tests": [
              {
                "title": "InstrumentID is an array",
                "fullTitle": "inputParser #parseInput() InstrumentID is an array",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isArray(InstrumentID), true);",
                "err": {},
                "isRoot": false,
                "uuid": "1c6d9eaa-2749-4e01-ad7f-4e67724434ff",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "ListOfVar is an array",
                "fullTitle": "inputParser #parseInput() ListOfVar is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isArray(ListOfVar), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d42cc53b-f64f-46ee-9577-6a515323bbc0",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "UpperWindow is a number",
                "fullTitle": "inputParser #parseInput() UpperWindow is a number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isInteger(UpperWindow), true);",
                "err": {},
                "isRoot": false,
                "uuid": "8fa12818-13e4-49c7-be15-284a92f6cc5b",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "LowerWindow is a number",
                "fullTitle": "inputParser #parseInput() LowerWindow is a number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isInteger(LowerWindow), true);",
                "err": {},
                "isRoot": false,
                "uuid": "e2c109ed-dca5-4ce4-905a-239b041d91c2",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "DateOfInterest is a date",
                "fullTitle": "inputParser #parseInput() DateOfInterest is a date",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isDate(DateOfInterest), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d4eb0fe7-6fc8-4f75-b8d7-7f7a0a0d5410",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is missing",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is missing",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7d183c06-be12-43c4-aa63-3b8151d65e26",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e2ae35fa-c0f5-486b-a28f-cdf7cc8b16c8",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if LowerWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if LowerWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "efb991b5-6ea4-4693-a3b8-51f0089a494b",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if LowerWindow is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if LowerWindow is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": \"three\",\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "cd51e23c-53ab-4928-8332-72a597823d9f",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if UpperWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if UpperWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "5205cd52-7927-4dbc-b92c-0d2a826c1203",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if UpperWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if UpperWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"UpperWindow\": \"five\",\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d2140b5c-066e-4de2-b114-29f1ce33b4da",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10-12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9d7f3701-0ec0-43ae-9c88-da7a2551b29f",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if DateOfInterest is missing",
                "fullTitle": "inputParser #parseInput() Should throw if DateOfInterest is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "69c04d9b-8dd9-42e3-8aac-37fcb4f56f8e",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "InstrumentID is an array",
                "fullTitle": "inputParser #parseInput() InstrumentID is an array",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isArray(InstrumentID), true);",
                "err": {},
                "isRoot": false,
                "uuid": "1c6d9eaa-2749-4e01-ad7f-4e67724434ff",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "ListOfVar is an array",
                "fullTitle": "inputParser #parseInput() ListOfVar is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isArray(ListOfVar), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d42cc53b-f64f-46ee-9577-6a515323bbc0",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "UpperWindow is a number",
                "fullTitle": "inputParser #parseInput() UpperWindow is a number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isInteger(UpperWindow), true);",
                "err": {},
                "isRoot": false,
                "uuid": "8fa12818-13e4-49c7-be15-284a92f6cc5b",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "LowerWindow is a number",
                "fullTitle": "inputParser #parseInput() LowerWindow is a number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isInteger(LowerWindow), true);",
                "err": {},
                "isRoot": false,
                "uuid": "e2c109ed-dca5-4ce4-905a-239b041d91c2",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "DateOfInterest is a date",
                "fullTitle": "inputParser #parseInput() DateOfInterest is a date",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(_.isDate(DateOfInterest), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d4eb0fe7-6fc8-4f75-b8d7-7f7a0a0d5410",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is missing",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is missing",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7d183c06-be12-43c4-aa63-3b8151d65e26",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e2ae35fa-c0f5-486b-a28f-cdf7cc8b16c8",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if LowerWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if LowerWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "efb991b5-6ea4-4693-a3b8-51f0089a494b",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if LowerWindow is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if LowerWindow is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": \"three\",\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "cd51e23c-53ab-4928-8332-72a597823d9f",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if UpperWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if UpperWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "5205cd52-7927-4dbc-b92c-0d2a826c1203",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if UpperWindow is missing",
                "fullTitle": "inputParser #parseInput() Should throw if UpperWindow is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"UpperWindow\": \"five\",\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d2140b5c-066e-4de2-b114-29f1ce33b4da",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if InstrumentID is invalid",
                "fullTitle": "inputParser #parseInput() Should throw if InstrumentID is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10-12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9d7f3701-0ec0-43ae-9c88-da7a2551b29f",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              },
              {
                "title": "Should throw if DateOfInterest is missing",
                "fullTitle": "inputParser #parseInput() Should throw if DateOfInterest is missing",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "69c04d9b-8dd9-42e3-8aac-37fcb4f56f8e",
                "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 13,
            "totalPasses": 13,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          },
          {
            "title": "#hasNull()",
            "suites": [],
            "tests": [
              {
                "title": "throws an error if parameters contain a null value",
                "fullTitle": "inputParser #hasNull() throws an error if parameters contain a null value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters1 = {\n\t\"InstrumentID\": null,\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 4,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\n// console.log(parameters1)\nassert.throws(\n\tfunction () {\n\t\treturn hasNull(parameters1)\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "538293d8-3bd7-4065-98e1-3455b45e5627",
                "parentUUID": "1d7ce73b-71d3-4994-9b35-1df0068f53dc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "1d7ce73b-71d3-4994-9b35-1df0068f53dc",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "throws an error if parameters contain a null value",
                "fullTitle": "inputParser #hasNull() throws an error if parameters contain a null value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let parameters1 = {\n\t\"InstrumentID\": null,\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 4,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\n// console.log(parameters1)\nassert.throws(\n\tfunction () {\n\t\treturn hasNull(parameters1)\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "538293d8-3bd7-4065-98e1-3455b45e5627",
                "parentUUID": "1d7ce73b-71d3-4994-9b35-1df0068f53dc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "#isNumeric()",
            "suites": [],
            "tests": [
              {
                "title": "throws an error if UpperWindow isn't a number or greater than or equal to 0",
                "fullTitle": "inputParser #isNumeric() throws an error if UpperWindow isn't a number or greater than or equal to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(isNumeric(parameters2.UpperWindow), false);",
                "err": {},
                "isRoot": false,
                "uuid": "e6f4852d-afe6-448e-918a-083c6eefe4eb",
                "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
                "skipped": false
              },
              {
                "title": "throws an error if LowerWindow isn't a number or greater than or equal to 0",
                "fullTitle": "inputParser #isNumeric() throws an error if LowerWindow isn't a number or greater than or equal to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(isNumeric(parameters2.LowerWindow), false);",
                "err": {},
                "isRoot": false,
                "uuid": "71b21973-cd3b-4d3f-b1e3-36a3952f7ef7",
                "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "throws an error if UpperWindow isn't a number or greater than or equal to 0",
                "fullTitle": "inputParser #isNumeric() throws an error if UpperWindow isn't a number or greater than or equal to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(isNumeric(parameters2.UpperWindow), false);",
                "err": {},
                "isRoot": false,
                "uuid": "e6f4852d-afe6-448e-918a-083c6eefe4eb",
                "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
                "skipped": false
              },
              {
                "title": "throws an error if LowerWindow isn't a number or greater than or equal to 0",
                "fullTitle": "inputParser #isNumeric() throws an error if LowerWindow isn't a number or greater than or equal to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(isNumeric(parameters2.LowerWindow), false);",
                "err": {},
                "isRoot": false,
                "uuid": "71b21973-cd3b-4d3f-b1e3-36a3952f7ef7",
                "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "#listIsValid()",
            "suites": [],
            "tests": [
              {
                "title": "throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
                "fullTitle": "inputParser #listIsValid() throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(parameters3);\nassert.throws(\n\tfunction () {\n\t\treturn listIsValid(parameters3.ListOfVar)\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "194496bd-7a3b-48dc-93a8-eb2802cc7130",
                "parentUUID": "fc017311-059a-4f50-b2a1-c1b019e4650f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "fc017311-059a-4f50-b2a1-c1b019e4650f",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
                "fullTitle": "inputParser #listIsValid() throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(parameters3);\nassert.throws(\n\tfunction () {\n\t\treturn listIsValid(parameters3.ListOfVar)\n\t},\n\tError\n);",
                "err": {},
                "isRoot": false,
                "uuid": "194496bd-7a3b-48dc-93a8-eb2802cc7130",
                "parentUUID": "fc017311-059a-4f50-b2a1-c1b019e4650f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "65b0f819-a2f6-47ba-9527-d23d257216d7",
        "fullFile": "/Users/cungminh/seng3011/test/test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "dataParser",
        "suites": [
          {
            "title": "#fetchData()",
            "suites": [],
            "tests": [
              {
                "title": "should return csv content as text",
                "fullTitle": "dataParser #fetchData() should return csv content as text",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
                "err": {},
                "isRoot": false,
                "uuid": "c02deb1d-c993-40ca-8055-fc7631d779e1",
                "parentUUID": "a44be203-b8ff-47a9-af3f-46cadec1818f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "a44be203-b8ff-47a9-af3f-46cadec1818f",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return csv content as text",
                "fullTitle": "dataParser #fetchData() should return csv content as text",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
                "err": {},
                "isRoot": false,
                "uuid": "c02deb1d-c993-40ca-8055-fc7631d779e1",
                "parentUUID": "a44be203-b8ff-47a9-af3f-46cadec1818f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 404,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "eac4a118-631e-42f1-a3fd-9cb97da7098c",
        "fullFile": "/Users/cungminh/seng3011/test/test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "tableBuilder",
        "suites": [],
        "tests": [
          {
            "title": "should return a table built from csvData",
            "fullTitle": "tableBuilder should return a table built from csvData",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
            "err": {},
            "isRoot": false,
            "uuid": "240afb4c-2d59-45bc-92b6-42a31569c906",
            "parentUUID": "68daa881-9734-4879-b321-dd718c0cf838",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "68daa881-9734-4879-b321-dd718c0cf838",
        "fullFile": "/Users/cungminh/seng3011/test/test.js",
        "passes": [
          {
            "title": "should return a table built from csvData",
            "fullTitle": "tableBuilder should return a table built from csvData",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
            "err": {},
            "isRoot": false,
            "uuid": "240afb4c-2d59-45bc-92b6-42a31569c906",
            "parentUUID": "68daa881-9734-4879-b321-dd718c0cf838",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 19,
        "rootEmpty": false
      },
      {
        "title": "calcs",
        "suites": [
          {
            "title": "#calculate()",
            "suites": [],
            "tests": [
              {
                "title": "should return an object for the results table",
                "fullTitle": "calcs #calculate() should return an object for the results table",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ret = calculate(table, param);\n// console.log(ret);\nassert.equal(_.isObject(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d71e7843-239c-4206-bc2c-d292cba115fe",
                "parentUUID": "ff92edba-c8d8-41d4-be08-c19998fbb922",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "ff92edba-c8d8-41d4-be08-c19998fbb922",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return an object for the results table",
                "fullTitle": "calcs #calculate() should return an object for the results table",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ret = calculate(table, param);\n// console.log(ret);\nassert.equal(_.isObject(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "d71e7843-239c-4206-bc2c-d292cba115fe",
                "parentUUID": "ff92edba-c8d8-41d4-be08-c19998fbb922",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "#return_number()",
            "suites": [],
            "tests": [
              {
                "title": "should return an array of numbers",
                "fullTitle": "calcs #return_number() should return an array of numbers",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_number(ADJCLOSE);\n// console.log(ret);\nassert.equal(_.isArray(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a81f6a-3d34-4cee-a78d-8de946fc9574",
                "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
                "skipped": false
              },
              {
                "title": "should throw an error if ADJCLOSE is not an array",
                "fullTitle": "calcs #return_number() should throw an error if ADJCLOSE is not an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ADJCLOSE = 5;\nassert.throws(\n\tfunction () {\n\t\treturn return_number(ADJCLOSE);\n\t})\nError;",
                "err": {},
                "isRoot": false,
                "uuid": "8c111806-f05d-4bcf-bcb0-c0101b29900f",
                "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return an array of numbers",
                "fullTitle": "calcs #return_number() should return an array of numbers",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_number(ADJCLOSE);\n// console.log(ret);\nassert.equal(_.isArray(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a81f6a-3d34-4cee-a78d-8de946fc9574",
                "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
                "skipped": false
              },
              {
                "title": "should throw an error if ADJCLOSE is not an array",
                "fullTitle": "calcs #return_number() should throw an error if ADJCLOSE is not an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ADJCLOSE = 5;\nassert.throws(\n\tfunction () {\n\t\treturn return_number(ADJCLOSE);\n\t})\nError;",
                "err": {},
                "isRoot": false,
                "uuid": "8c111806-f05d-4bcf-bcb0-c0101b29900f",
                "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "#return_percentage()",
            "suites": [],
            "tests": [
              {
                "title": "should return an array of percentages",
                "fullTitle": "calcs #return_percentage() should return an array of percentages",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_percentage(ADJCLOSE);\nassert.equal(_.isArray(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "7b537c93-c460-4a82-b8a3-8fe850da2f6d",
                "parentUUID": "3f787380-6795-4d07-8f43-e833f3fe8678",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "3f787380-6795-4d07-8f43-e833f3fe8678",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return an array of percentages",
                "fullTitle": "calcs #return_percentage() should return an array of percentages",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_percentage(ADJCLOSE);\nassert.equal(_.isArray(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "7b537c93-c460-4a82-b8a3-8fe850da2f6d",
                "parentUUID": "3f787380-6795-4d07-8f43-e833f3fe8678",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "#avg_return()",
            "suites": [],
            "tests": [
              {
                "title": "should return an integer for the average return",
                "fullTitle": "calcs #avg_return() should return an integer for the average return",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURN = return_number(ADJCLOSE);\n// console.log(RETURN);\nlet AV_RETURN = avg_return(RETURN, param.DateOfInterest, param.LowerWindow, param.UpperWindow)\n// console.log(AV_RETURN);\n// console.log(RETURN);",
                "err": {},
                "isRoot": false,
                "uuid": "1019b2bd-b66e-4500-8953-57c8c1296955",
                "parentUUID": "0b58d9f5-2146-4200-b5a1-16b5b3cfe93d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "0b58d9f5-2146-4200-b5a1-16b5b3cfe93d",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return an integer for the average return",
                "fullTitle": "calcs #avg_return() should return an integer for the average return",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURN = return_number(ADJCLOSE);\n// console.log(RETURN);\nlet AV_RETURN = avg_return(RETURN, param.DateOfInterest, param.LowerWindow, param.UpperWindow)\n// console.log(AV_RETURN);\n// console.log(RETURN);",
                "err": {},
                "isRoot": false,
                "uuid": "1019b2bd-b66e-4500-8953-57c8c1296955",
                "parentUUID": "0b58d9f5-2146-4200-b5a1-16b5b3cfe93d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "#cumulative_return()",
            "suites": [],
            "tests": [
              {
                "title": "should return an integer for the cumulative return",
                "fullTitle": "calcs #cumulative_return() should return an integer for the cumulative return",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(table);\nlet ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURNS = return_number(ADJCLOSE);\nlet ret = cumulative_return(RETURNS, 1, param.LowerWindow, param.UpperWindow);\n// console.log(ret);\nassert.equal(_.isNumber(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "6303545b-f6c0-4abc-8e1c-fd349f2bbbdc",
                "parentUUID": "608c4a96-ea96-40a7-b88a-3c81297004c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/test.js",
            "uuid": "608c4a96-ea96-40a7-b88a-3c81297004c1",
            "fullFile": "/Users/cungminh/seng3011/test/test.js",
            "passes": [
              {
                "title": "should return an integer for the cumulative return",
                "fullTitle": "calcs #cumulative_return() should return an integer for the cumulative return",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(table);\nlet ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURNS = return_number(ADJCLOSE);\nlet ret = cumulative_return(RETURNS, 1, param.LowerWindow, param.UpperWindow);\n// console.log(ret);\nassert.equal(_.isNumber(ret), true);",
                "err": {},
                "isRoot": false,
                "uuid": "6303545b-f6c0-4abc-8e1c-fd349f2bbbdc",
                "parentUUID": "608c4a96-ea96-40a7-b88a-3c81297004c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "9ed2c93f-bd71-4e12-9c62-303db2aa22e1",
        "fullFile": "/Users/cungminh/seng3011/test/test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "3a9c7bda-54df-4fdb-8cc5-d41ae8359b7b",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for one company should get response within 5000ms",
      "timedOut": true,
      "duration": 5004,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[0])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "ffd5cd58-b80a-4988-a7c3-096d38baed14",
      "parentUUID": "c9741ff3-78ae-441f-b0f0-3fdeb1ced343",
      "skipped": false
    },
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for 3 companies should get response within 5000ms",
      "timedOut": true,
      "duration": 5000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[2])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "d56fb703-0b70-4586-b565-5fceccb5f948",
      "parentUUID": "8a6e9f7d-0fcb-4e79-9df9-b6c23876af91",
      "skipped": false
    },
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for 6 companies should get response within 5000ms",
      "timedOut": true,
      "duration": 5004,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[1])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "a2115ba5-989d-45b8-acb5-0869a7bf214c",
      "parentUUID": "ba9749c7-3717-413a-b6cc-4a80cfb801fc",
      "skipped": false
    },
    {
      "title": "InstrumentID is an array",
      "fullTitle": "#parseInput() InstrumentID is an array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isArray(InstrumentID), true);",
      "err": {},
      "isRoot": false,
      "uuid": "1c6d9eaa-2749-4e01-ad7f-4e67724434ff",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "ListOfVar is an array",
      "fullTitle": "#parseInput() ListOfVar is an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isArray(ListOfVar), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d42cc53b-f64f-46ee-9577-6a515323bbc0",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "UpperWindow is a number",
      "fullTitle": "#parseInput() UpperWindow is a number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isInteger(UpperWindow), true);",
      "err": {},
      "isRoot": false,
      "uuid": "8fa12818-13e4-49c7-be15-284a92f6cc5b",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "LowerWindow is a number",
      "fullTitle": "#parseInput() LowerWindow is a number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isInteger(LowerWindow), true);",
      "err": {},
      "isRoot": false,
      "uuid": "e2c109ed-dca5-4ce4-905a-239b041d91c2",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "DateOfInterest is a date",
      "fullTitle": "#parseInput() DateOfInterest is a date",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isDate(DateOfInterest), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d4eb0fe7-6fc8-4f75-b8d7-7f7a0a0d5410",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is missing",
      "fullTitle": "#parseInput() Should throw if InstrumentID is missing",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "7d183c06-be12-43c4-aa63-3b8151d65e26",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is invalid",
      "fullTitle": "#parseInput() Should throw if InstrumentID is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "e2ae35fa-c0f5-486b-a28f-cdf7cc8b16c8",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if LowerWindow is missing",
      "fullTitle": "#parseInput() Should throw if LowerWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "efb991b5-6ea4-4693-a3b8-51f0089a494b",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if LowerWindow is invalid",
      "fullTitle": "#parseInput() Should throw if LowerWindow is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": \"three\",\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "cd51e23c-53ab-4928-8332-72a597823d9f",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if UpperWindow is missing",
      "fullTitle": "#parseInput() Should throw if UpperWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "5205cd52-7927-4dbc-b92c-0d2a826c1203",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if UpperWindow is missing",
      "fullTitle": "#parseInput() Should throw if UpperWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"UpperWindow\": \"five\",\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "d2140b5c-066e-4de2-b114-29f1ce33b4da",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is invalid",
      "fullTitle": "#parseInput() Should throw if InstrumentID is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10-12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "9d7f3701-0ec0-43ae-9c88-da7a2551b29f",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if DateOfInterest is missing",
      "fullTitle": "#parseInput() Should throw if DateOfInterest is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "69c04d9b-8dd9-42e3-8aac-37fcb4f56f8e",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "throws an error if parameters contain a null value",
      "fullTitle": "#hasNull() throws an error if parameters contain a null value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters1 = {\n\t\"InstrumentID\": null,\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 4,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\n// console.log(parameters1)\nassert.throws(\n\tfunction () {\n\t\treturn hasNull(parameters1)\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "538293d8-3bd7-4065-98e1-3455b45e5627",
      "parentUUID": "1d7ce73b-71d3-4994-9b35-1df0068f53dc",
      "skipped": false
    },
    {
      "title": "throws an error if UpperWindow isn't a number or greater than or equal to 0",
      "fullTitle": "#isNumeric() throws an error if UpperWindow isn't a number or greater than or equal to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(isNumeric(parameters2.UpperWindow), false);",
      "err": {},
      "isRoot": false,
      "uuid": "e6f4852d-afe6-448e-918a-083c6eefe4eb",
      "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
      "skipped": false
    },
    {
      "title": "throws an error if LowerWindow isn't a number or greater than or equal to 0",
      "fullTitle": "#isNumeric() throws an error if LowerWindow isn't a number or greater than or equal to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(isNumeric(parameters2.LowerWindow), false);",
      "err": {},
      "isRoot": false,
      "uuid": "71b21973-cd3b-4d3f-b1e3-36a3952f7ef7",
      "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
      "skipped": false
    },
    {
      "title": "throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
      "fullTitle": "#listIsValid() throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(parameters3);\nassert.throws(\n\tfunction () {\n\t\treturn listIsValid(parameters3.ListOfVar)\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "194496bd-7a3b-48dc-93a8-eb2802cc7130",
      "parentUUID": "fc017311-059a-4f50-b2a1-c1b019e4650f",
      "skipped": false
    },
    {
      "title": "should return csv content as text",
      "fullTitle": "#fetchData() should return csv content as text",
      "timedOut": false,
      "duration": 404,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
      "err": {},
      "isRoot": false,
      "uuid": "c02deb1d-c993-40ca-8055-fc7631d779e1",
      "parentUUID": "a44be203-b8ff-47a9-af3f-46cadec1818f",
      "skipped": false
    },
    {
      "title": "should return a table built from csvData",
      "fullTitle": "tableBuilder should return a table built from csvData",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
      "err": {},
      "isRoot": false,
      "uuid": "240afb4c-2d59-45bc-92b6-42a31569c906",
      "parentUUID": "68daa881-9734-4879-b321-dd718c0cf838",
      "skipped": false
    },
    {
      "title": "should return an object for the results table",
      "fullTitle": "#calculate() should return an object for the results table",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ret = calculate(table, param);\n// console.log(ret);\nassert.equal(_.isObject(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d71e7843-239c-4206-bc2c-d292cba115fe",
      "parentUUID": "ff92edba-c8d8-41d4-be08-c19998fbb922",
      "skipped": false
    },
    {
      "title": "should return an array of numbers",
      "fullTitle": "#return_number() should return an array of numbers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_number(ADJCLOSE);\n// console.log(ret);\nassert.equal(_.isArray(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "c9a81f6a-3d34-4cee-a78d-8de946fc9574",
      "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
      "skipped": false
    },
    {
      "title": "should throw an error if ADJCLOSE is not an array",
      "fullTitle": "#return_number() should throw an error if ADJCLOSE is not an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "ADJCLOSE = 5;\nassert.throws(\n\tfunction () {\n\t\treturn return_number(ADJCLOSE);\n\t})\nError;",
      "err": {},
      "isRoot": false,
      "uuid": "8c111806-f05d-4bcf-bcb0-c0101b29900f",
      "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
      "skipped": false
    },
    {
      "title": "should return an array of percentages",
      "fullTitle": "#return_percentage() should return an array of percentages",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_percentage(ADJCLOSE);\nassert.equal(_.isArray(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "7b537c93-c460-4a82-b8a3-8fe850da2f6d",
      "parentUUID": "3f787380-6795-4d07-8f43-e833f3fe8678",
      "skipped": false
    },
    {
      "title": "should return an integer for the average return",
      "fullTitle": "#avg_return() should return an integer for the average return",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURN = return_number(ADJCLOSE);\n// console.log(RETURN);\nlet AV_RETURN = avg_return(RETURN, param.DateOfInterest, param.LowerWindow, param.UpperWindow)\n// console.log(AV_RETURN);\n// console.log(RETURN);",
      "err": {},
      "isRoot": false,
      "uuid": "1019b2bd-b66e-4500-8953-57c8c1296955",
      "parentUUID": "0b58d9f5-2146-4200-b5a1-16b5b3cfe93d",
      "skipped": false
    },
    {
      "title": "should return an integer for the cumulative return",
      "fullTitle": "#cumulative_return() should return an integer for the cumulative return",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(table);\nlet ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURNS = return_number(ADJCLOSE);\nlet ret = cumulative_return(RETURNS, 1, param.LowerWindow, param.UpperWindow);\n// console.log(ret);\nassert.equal(_.isNumber(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "6303545b-f6c0-4abc-8e1c-fd349f2bbbdc",
      "parentUUID": "608c4a96-ea96-40a7-b88a-3c81297004c1",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "InstrumentID is an array",
      "fullTitle": "#parseInput() InstrumentID is an array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isArray(InstrumentID), true);",
      "err": {},
      "isRoot": false,
      "uuid": "1c6d9eaa-2749-4e01-ad7f-4e67724434ff",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "ListOfVar is an array",
      "fullTitle": "#parseInput() ListOfVar is an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isArray(ListOfVar), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d42cc53b-f64f-46ee-9577-6a515323bbc0",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "UpperWindow is a number",
      "fullTitle": "#parseInput() UpperWindow is a number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isInteger(UpperWindow), true);",
      "err": {},
      "isRoot": false,
      "uuid": "8fa12818-13e4-49c7-be15-284a92f6cc5b",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "LowerWindow is a number",
      "fullTitle": "#parseInput() LowerWindow is a number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isInteger(LowerWindow), true);",
      "err": {},
      "isRoot": false,
      "uuid": "e2c109ed-dca5-4ce4-905a-239b041d91c2",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "DateOfInterest is a date",
      "fullTitle": "#parseInput() DateOfInterest is a date",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(_.isDate(DateOfInterest), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d4eb0fe7-6fc8-4f75-b8d7-7f7a0a0d5410",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is missing",
      "fullTitle": "#parseInput() Should throw if InstrumentID is missing",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "7d183c06-be12-43c4-aa63-3b8151d65e26",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is invalid",
      "fullTitle": "#parseInput() Should throw if InstrumentID is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "e2ae35fa-c0f5-486b-a28f-cdf7cc8b16c8",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if LowerWindow is missing",
      "fullTitle": "#parseInput() Should throw if LowerWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "efb991b5-6ea4-4693-a3b8-51f0089a494b",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if LowerWindow is invalid",
      "fullTitle": "#parseInput() Should throw if LowerWindow is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": \"three\",\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "cd51e23c-53ab-4928-8332-72a597823d9f",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if UpperWindow is missing",
      "fullTitle": "#parseInput() Should throw if UpperWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "5205cd52-7927-4dbc-b92c-0d2a826c1203",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if UpperWindow is missing",
      "fullTitle": "#parseInput() Should throw if UpperWindow is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP.AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\t\n\t\"UpperWindow\": \"five\",\n\t\"LowerWindow\": 2,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "d2140b5c-066e-4de2-b114-29f1ce33b4da",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if InstrumentID is invalid",
      "fullTitle": "#parseInput() Should throw if InstrumentID is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10-12/2012\"\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "9d7f3701-0ec0-43ae-9c88-da7a2551b29f",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "Should throw if DateOfInterest is missing",
      "fullTitle": "#parseInput() Should throw if DateOfInterest is missing",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters = {\n\t\"InstrumentID\": \"ABP-AX\",\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 5,\n\t\"LowerWindow\": 3,\n}\nassert.throws(\n\tfunction() {\n\t\treturn parseInput(parameters);\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "69c04d9b-8dd9-42e3-8aac-37fcb4f56f8e",
      "parentUUID": "4c69fdad-49c4-48c2-8751-7c6fabdf6c17",
      "skipped": false
    },
    {
      "title": "throws an error if parameters contain a null value",
      "fullTitle": "#hasNull() throws an error if parameters contain a null value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let parameters1 = {\n\t\"InstrumentID\": null,\n\t\"ListOfVar\": [\"CM_Return\", \"AV_Return\"],\n\t\"UpperWindow\": 4,\n\t\"LowerWindow\": 3,\n\t\"DateOfInterest\": \"10/12/2012\"\n}\n// console.log(parameters1)\nassert.throws(\n\tfunction () {\n\t\treturn hasNull(parameters1)\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "538293d8-3bd7-4065-98e1-3455b45e5627",
      "parentUUID": "1d7ce73b-71d3-4994-9b35-1df0068f53dc",
      "skipped": false
    },
    {
      "title": "throws an error if UpperWindow isn't a number or greater than or equal to 0",
      "fullTitle": "#isNumeric() throws an error if UpperWindow isn't a number or greater than or equal to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(isNumeric(parameters2.UpperWindow), false);",
      "err": {},
      "isRoot": false,
      "uuid": "e6f4852d-afe6-448e-918a-083c6eefe4eb",
      "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
      "skipped": false
    },
    {
      "title": "throws an error if LowerWindow isn't a number or greater than or equal to 0",
      "fullTitle": "#isNumeric() throws an error if LowerWindow isn't a number or greater than or equal to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(isNumeric(parameters2.LowerWindow), false);",
      "err": {},
      "isRoot": false,
      "uuid": "71b21973-cd3b-4d3f-b1e3-36a3952f7ef7",
      "parentUUID": "fe3ae5d4-8a0e-46b4-be98-6cea33c968b4",
      "skipped": false
    },
    {
      "title": "throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
      "fullTitle": "#listIsValid() throws an error if ListOfVar doesn't contain \"CM_Return\" or \"AV_Return\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(parameters3);\nassert.throws(\n\tfunction () {\n\t\treturn listIsValid(parameters3.ListOfVar)\n\t},\n\tError\n);",
      "err": {},
      "isRoot": false,
      "uuid": "194496bd-7a3b-48dc-93a8-eb2802cc7130",
      "parentUUID": "fc017311-059a-4f50-b2a1-c1b019e4650f",
      "skipped": false
    },
    {
      "title": "should return csv content as text",
      "fullTitle": "#fetchData() should return csv content as text",
      "timedOut": false,
      "duration": 404,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
      "err": {},
      "isRoot": false,
      "uuid": "c02deb1d-c993-40ca-8055-fc7631d779e1",
      "parentUUID": "a44be203-b8ff-47a9-af3f-46cadec1818f",
      "skipped": false
    },
    {
      "title": "should return a table built from csvData",
      "fullTitle": "tableBuilder should return a table built from csvData",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (done) {\n\t\ttry {\n\t\t\tawait fn();\n\t\t\tdone();\n\t\t} catch (err) {\n\t\t\tdone(err);\n\t\t}",
      "err": {},
      "isRoot": false,
      "uuid": "240afb4c-2d59-45bc-92b6-42a31569c906",
      "parentUUID": "68daa881-9734-4879-b321-dd718c0cf838",
      "skipped": false
    },
    {
      "title": "should return an object for the results table",
      "fullTitle": "#calculate() should return an object for the results table",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ret = calculate(table, param);\n// console.log(ret);\nassert.equal(_.isObject(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "d71e7843-239c-4206-bc2c-d292cba115fe",
      "parentUUID": "ff92edba-c8d8-41d4-be08-c19998fbb922",
      "skipped": false
    },
    {
      "title": "should return an array of numbers",
      "fullTitle": "#return_number() should return an array of numbers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_number(ADJCLOSE);\n// console.log(ret);\nassert.equal(_.isArray(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "c9a81f6a-3d34-4cee-a78d-8de946fc9574",
      "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
      "skipped": false
    },
    {
      "title": "should throw an error if ADJCLOSE is not an array",
      "fullTitle": "#return_number() should throw an error if ADJCLOSE is not an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "ADJCLOSE = 5;\nassert.throws(\n\tfunction () {\n\t\treturn return_number(ADJCLOSE);\n\t})\nError;",
      "err": {},
      "isRoot": false,
      "uuid": "8c111806-f05d-4bcf-bcb0-c0101b29900f",
      "parentUUID": "3ab0d9e0-fc0b-4d24-be13-6b77465cc659",
      "skipped": false
    },
    {
      "title": "should return an array of percentages",
      "fullTitle": "#return_percentage() should return an array of percentages",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet ret = return_percentage(ADJCLOSE);\nassert.equal(_.isArray(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "7b537c93-c460-4a82-b8a3-8fe850da2f6d",
      "parentUUID": "3f787380-6795-4d07-8f43-e833f3fe8678",
      "skipped": false
    },
    {
      "title": "should return an integer for the average return",
      "fullTitle": "#avg_return() should return an integer for the average return",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURN = return_number(ADJCLOSE);\n// console.log(RETURN);\nlet AV_RETURN = avg_return(RETURN, param.DateOfInterest, param.LowerWindow, param.UpperWindow)\n// console.log(AV_RETURN);\n// console.log(RETURN);",
      "err": {},
      "isRoot": false,
      "uuid": "1019b2bd-b66e-4500-8953-57c8c1296955",
      "parentUUID": "0b58d9f5-2146-4200-b5a1-16b5b3cfe93d",
      "skipped": false
    },
    {
      "title": "should return an integer for the cumulative return",
      "fullTitle": "#cumulative_return() should return an integer for the cumulative return",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(table);\nlet ADJCLOSE = _.map(table, 'ADJCLOSE');\nlet RETURNS = return_number(ADJCLOSE);\nlet ret = cumulative_return(RETURNS, 1, param.LowerWindow, param.UpperWindow);\n// console.log(ret);\nassert.equal(_.isNumber(ret), true);",
      "err": {},
      "isRoot": false,
      "uuid": "6303545b-f6c0-4abc-8e1c-fd349f2bbbdc",
      "parentUUID": "608c4a96-ea96-40a7-b88a-3c81297004c1",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for one company should get response within 5000ms",
      "timedOut": true,
      "duration": 5004,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[0])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "ffd5cd58-b80a-4988-a7c3-096d38baed14",
      "parentUUID": "c9741ff3-78ae-441f-b0f0-3fdeb1ced343",
      "skipped": false
    },
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for 3 companies should get response within 5000ms",
      "timedOut": true,
      "duration": 5000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[2])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "d56fb703-0b70-4586-b565-5fceccb5f948",
      "parentUUID": "8a6e9f7d-0fcb-4e79-9df9-b6c23876af91",
      "skipped": false
    },
    {
      "title": "should get response within 5000ms",
      "fullTitle": "# Request returns for 6 companies should get response within 5000ms",
      "timedOut": true,
      "duration": 5004,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(5000);\nfetch(MULTI_IDS_TEST_URLS[1])\n\t.then(response => response.json())\n\t.catch(err => done(err))",
      "err": {
        "estack": "Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test."
      },
      "isRoot": false,
      "uuid": "a2115ba5-989d-45b8-acb5-0869a7bf214c",
      "parentUUID": "ba9749c7-3717-413a-b6cc-4a80cfb801fc",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}